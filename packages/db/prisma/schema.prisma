generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  username          String              @unique
  password          String
  photo             String?
  isVerified        Boolean             @default(false)
  lastLogin         DateTime            @default(now())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  drawings          Drawing[]
  rooms             UserRoom[]
  ResetPassword     ResetPassword[]
  VerificationToken VerificationToken[]
}

model Drawing {
  id        Int       @id @default(autoincrement())
  title     String
  ownerId   Int
  roomName  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  owner     User      @relation(fields: [ownerId], references: [id])
  elements  Element[]
}

model Element {
  id          Int     @id @default(autoincrement())
  type        String // rectangle, circle, text, line, arrow, etc.
  x           Float
  y           Float
  width       Float? // Optional for lines and arrows
  height      Float? // Optional for lines and arrows
  content     String? // Only used for text elements
  strokeColor String? // Border color of the element
  points      Json? // Used only for lines, arrows, freehand drawings
  drawingId   Int
  isEraser    Boolean @default(false)
  drawing     Drawing @relation(fields: [drawingId], references: [id])
}

model Room {
  id        Int        @id @default(autoincrement())
  roomName  String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     UserRoom[]
}

model UserRoom {
  id       Int      @id @default(autoincrement())
  userId   Int
  roomId   Int
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  room     Room     @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId]) // ensure uniqueness for userId and roomId
}

model ResetPassword {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
